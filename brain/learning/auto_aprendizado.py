import time
import re
import string
import os
from datetime import datetime
from comandos.comandos_pesquisa import execute_search
from brain.learning.inserir_memoria import insert_memory
from brain.memoria import llama_query, DEFAULT_MODEL, DEFAULT_MODEL_HIGH
from brain.learning.consultar_memoria import consultar_memoria

aprendizado_ativado = False


def limpar_titulo(texto):
    titulo = texto.strip().lower()
    titulo = re.sub(r"\be\b$", "", titulo).strip()
    return titulo.strip(string.punctuation)


def gerar_topicos_populares():
    prompt = (
        "Liste 5 t√≥picos relevantes, atuais e populares nas √°reas de ci√™ncia, tecnologia, inova√ß√£o ou sociedade. "
        "Inclua temas emergentes, pesquisas em destaque, avan√ßos cient√≠ficos ou tend√™ncias tecnol√≥gicas. "
        "Cada t√≥pico deve conter no m√°ximo 3 palavras. N√£o inclua explica√ß√µes, apenas a lista simples separada por v√≠rgulas.\n"
        "Exemplo: intelig√™ncia artificial, blockchain, computa√ß√£o qu√¢ntica, cidades inteligentes, biotecnologia avan√ßada"
    )
    resposta = llama_query(prompt, DEFAULT_MODEL_HIGH)

    if not isinstance(resposta, str):
        return []

    topicos = [
        t.strip().lower()
        for t in resposta.split(",")
        if 2 < len(t.strip()) < 40 and re.search(r"\w", t)
    ]

    topicos_unicos = list(dict.fromkeys(topicos))[:5]

    if not topicos_unicos:
        print(f"[DEBUG] Resposta bruta da IA: {resposta}")
        print("[FALLBACK] Usando t√≥picos padr√£o...")
        topicos_unicos = [
            "intelig√™ncia artificial",
            "blockchain",
            "rob√≥tica",
            "biotecnologia",
            "computa√ß√£o qu√¢ntica",
        ]

    return topicos_unicos


def log_aprendizado(titulo, conteudo, fonte, data):
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)

    data_hoje = datetime.now().strftime("%Y-%m-%d")
    nome_arquivo = os.path.join(log_dir, f"aprendizados_{data_hoje}.txt")

    try:
        with open(nome_arquivo, "a", encoding="utf-8") as f:
            f.write(f"\n=== {titulo.upper()} ===\n")
            f.write(f" {data} |  Fonte: {fonte}\n")
            f.write(f"{conteudo.strip()[:5000]}...\n")
            f.write("-" * 60 + "\n")
    except Exception as e:
        print(f"[ERRO] Falha ao salvar log de aprendizado: {e}")


def auto_aprender():
    while True:
        if not aprendizado_ativado:
            print("üõë [AUTO-LEARNING] Modo de aprendizado desativado. Pausando...\n")
            break

        print(f"\nüß† [AUTO-LEARNING] Iniciando novo ciclo √†s {datetime.now().strftime('%H:%M:%S')}...")
        topicos = gerar_topicos_populares()

        if not topicos:
            print("‚ö†Ô∏è Nenhum t√≥pico v√°lido gerado. Tentando novamente em instantes...\n")
            time.sleep(10)
            continue

        print(f"[AUTO-LEARNING] T√≥picos gerados: {topicos}")
        aprendidos_hoje = []

        for topico in topicos:
            if not aprendizado_ativado:
                print("üõë [AUTO-LEARNING] Modo de aprendizado desativado durante ciclo. Pausando...\n")
                return

            pergunta = f"O que √© {topico}?"
            resposta, fonte = execute_search(pergunta, speak=False)

            if isinstance(resposta, str) and "Erro" not in resposta:
                titulo = limpar_titulo(topico)
                data = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                if consultar_memoria(titulo):
                    print(f"‚ö†Ô∏è J√° sei sobre: {titulo}. Pulando...\n")
                    continue

                sucesso = insert_memory(titulo, resposta, fonte, data)
                if sucesso:
                    log_aprendizado(titulo, resposta, fonte, data)
                    aprendidos_hoje.append(titulo)
                    print(f"‚úÖ Aprendido: {titulo} (Fonte: {fonte})\n")
                else:
                    print(f"‚ö†Ô∏è Falha ao salvar: {titulo}")
            else:
                print(f"‚ùå N√£o foi poss√≠vel pesquisar sobre: {topico}")

        if aprendidos_hoje:
            print("\nüìö [AUTO-LEARNING] T√≥picos aprendidos neste ciclo:")
            for t in aprendidos_hoje:
                print(f"   ‚Ä¢ {t}")
        else:
            print("üõë Nenhum aprendizado conclu√≠do neste ciclo.")

        print("\nüîÅ Iniciando pr√≥ximo ciclo...\n")
        time.sleep(2)
